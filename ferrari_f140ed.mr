/*
{
   "engine":{
      "es_version":"V0.1.12A",
      "name":"Ferrari GTC4 Lusso V12 (F140 ED) 2016",
      "catalog_id":493,
      "yt_handle":null,
      "enable_update":true,
      "description":[
         "This is a Ferrari V12. F140 ED from GTC4 Lusso.",
         "65Â° bank angle.",
         "1-7-5-11-3-9-6-12-2-8-4-10."
      ]
   }
}
*/

// Engine Sim V0.1.12A
// Ferrari F140 ED (GTC4 Lusso engine) 690 HP @ 8000
// ferrari_f140ed
// Created by oror 2023
// 1-7-5-11-3-9-6-12-2-8-4-10

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label bore(94.0)
label stroke(75.2)
label compression_ratio(13.5)
label con_rod(144.0)
label intake_valve_lift(10.2) // ?
label exhaust_valve_lift(10.2) // ?
label compression_height(36.0 * units.mm) // ?
label intake_valve_diameter(37.8) // Supertech FEIVC-F136
label exhaust_valve_diameter(31.0) // Supertech FEEVC-F136
label intake_valves(2.0)
label exhaust_valves(2.0)

label ci(382.0)
label redline(8250.0)
label intake_cfm((ci * redline * 1.0) / 3456.0)
label exhaust_cfm((redline * 0.001) * ci / 2.0)

label cyl(12.0)
label row(2.0)
label cycle(2.0 * 360.0 * units.deg)
label vee(65.0 * units.deg)
label rot90(90.0 * units.deg)
label rot180(180.0 * units.deg)
label rot360(360.0 * units.deg)

// 575 valve timings
label IVO(7.0 * units.deg) //BTDC
label IVC(56.0 * units.deg) //ABDC
label EVO(36.0 * units.deg) //BBDC
label EVC(13.0 * units.deg) //ATDC

label intake_duration(IVO + IVC + rot180)
label exhaust_duration(EVO + EVC + rot180)

label ILC((-IVO + rot180 + IVC) / 2.0 + rot360)
label ELC((rot180 - EVO + EVC + rot360) / 2.0)

label con_rod_mass(538.0) // g 458
label crank_mass(28.0) // ? kg
label flywheel_mass(5.0) // kg

public node engine_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8500 * units.rpm;
    input limiter_duration: 0.02;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0/cyl) * cycle)
            .connect_wire(wires.wire5, (2.0/cyl) * cycle)
            .connect_wire(wires.wire3, (4.0/cyl) * cycle)
            .connect_wire(wires.wire6, (6.0/cyl) * cycle)
            .connect_wire(wires.wire2, (8.0/cyl) * cycle)
            .connect_wire(wires.wire4, (10.0/cyl) * cycle)
            .connect_wire(wires.wire7, (0.0/cyl) * cycle + vee)
            .connect_wire(wires.wire11, (2.0/cyl) * cycle + vee)
            .connect_wire(wires.wire9, (4.0/cyl) * cycle + vee)
            .connect_wire(wires.wire12, (6.0/cyl) * cycle + vee)
            .connect_wire(wires.wire8, (8.0/cyl) * cycle + vee)
            .connect_wire(wires.wire10, (10.0/cyl) * cycle + vee);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

public node eng_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: intake_duration,
            gamma: 3.3,
            lift: intake_valve_lift * units.mm,
            steps: 100
        );
}

public node eng_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: exhaust_duration,
            gamma: 3.3,
            lift: exhaust_valve_lift * units.mm,
            steps: 100
        );
}

public node engine_camshaft_builder {
    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: 0.0 * units.deg,
        base_radius: 1.8 * units.cm
    )

    camshaft _intake_cam_0(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_0(params, lobe_profile: eng_lobe_profile_exh())
    
    camshaft _intake_cam_1(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_1(params, lobe_profile: eng_lobe_profile_exh())
    
    label rot(2.0 * (360.0 / cyl) * units.deg)

    _intake_cam_0
        .add_lobe(ILC + 0 * rot)
        .add_lobe(ILC + 8 * rot)
        .add_lobe(ILC + 4 * rot)
        .add_lobe(ILC + 10 * rot)
        .add_lobe(ILC + 2 * rot)
        .add_lobe(ILC + 6 * rot)
    _exhaust_cam_0
        .add_lobe(ELC + 0 * rot)
        .add_lobe(ELC + 8 * rot)
        .add_lobe(ELC + 4 * rot)
        .add_lobe(ELC + 10 * rot)
        .add_lobe(ELC + 2 * rot)
        .add_lobe(ELC + 6 * rot)
        
    _intake_cam_1
        .add_lobe(ILC + 0 * rot + vee)
        .add_lobe(ILC + 8 * rot + vee)
        .add_lobe(ILC + 4 * rot + vee)
        .add_lobe(ILC + 10 * rot + vee)
        .add_lobe(ILC + 2 * rot + vee)
        .add_lobe(ILC + 6 * rot + vee)
    _exhaust_cam_1
        .add_lobe(ELC + 0 * rot + vee)
        .add_lobe(ELC + 8 * rot + vee)
        .add_lobe(ELC + 4 * rot + vee)
        .add_lobe(ELC + 10 * rot + vee)
        .add_lobe(ELC + 2 * rot + vee)
        .add_lobe(ELC + 6 * rot + vee)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node eng_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input flip_display: false;
    
    alias output __out: head;
    
    label bore_radius(bore / 2.0)

    // port_flow.py v0.2
    // intake H: 37.8 L: 10.2 N: 2.0
    // exhaust H: 31.0 L: 10.2 N: 2.0
    // intake port area: 1907.754 mm2; saturated lift: 8.196 mm
    // exhaust port area: 1283.105 mm2; saturated lift: 6.722 mm
    // cylinder volume: 521.871 cc; engine volume: 6262.456 cc 382.160 ci
    // 16 harmonic intake runner length: 12.991 cm; diameter: 4.534 cm
    // primary length: 93.320 cm, area: 10.655 cm2, diameter: 3.683 cm
    // collector diameter: 6.379 cm, area: 31.964 cm2
    // target power: 6930 RPM, torque: 4574 RPM
    function intake_flow(1.020 * units.mm)
    intake_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.020, 47.238)
        .add_flow_sample(2.040, 84.687)
        .add_flow_sample(3.060, 118.440)
        .add_flow_sample(4.080, 149.793)
        .add_flow_sample(5.100, 179.362)
        .add_flow_sample(6.120, 207.509)
        .add_flow_sample(7.140, 234.474)
        .add_flow_sample(8.160, 260.426)
        .add_flow_sample(9.180, 261.624)
        .add_flow_sample(10.200, 261.988)

    function exhaust_flow(1.020 * units.mm)
    exhaust_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.020, 37.592)
        .add_flow_sample(2.040, 67.155)
        .add_flow_sample(3.060, 93.687)
        .add_flow_sample(4.080, 118.252)
        .add_flow_sample(5.100, 141.353)
        .add_flow_sample(6.120, 163.288)
        .add_flow_sample(7.140, 175.846)
        .add_flow_sample(8.160, 176.075)
        .add_flow_sample(9.180, 176.358)
        .add_flow_sample(10.200, 176.695)

    cylinder_head head(
        chamber_volume: (circle_area(bore_radius) * stroke / compression_ratio) / 1000.0 * units.cc,
        intake_runner_volume: 209.716 * units.cc,
        intake_runner_cross_section_area: 16.143 * units.cm2,
        exhaust_runner_volume: 69.905 * units.cc,
        exhaust_runner_cross_section_area: 10.655 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node eng {
    alias output __out: engine;

    engine engine(
        name: "Ferrari F140 ED",
        starter_torque: 150 * units.Nm,
        starter_speed: 650 * units.rpm,
        redline: redline * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.99
        ),
        throttle_gamma: 1.5,
        jitter: 0.8,
        noise: 0.9,
        simulation_frequency: 6500
    )

    wires wires()
    
    connecting_rod_parameters cr_params(
        mass: con_rod_mass * units.g,
        moment_of_inertia: rod_moment_of_inertia(
            mass: con_rod_mass * units.g,
            length: con_rod * units.mm
        ),
        center_of_mass: 0.0,
        length: con_rod * units.mm
    )

    label crank_moment(
         disk_moment_of_inertia(mass: crank_mass * units.kg, radius: (stroke / 2.0) * units.mm)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass * units.kg, radius: (stroke * 3.5) * units.mm)
    )
    label other_moment(
        disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm)
    )

    crankshaft c0(
        throw: (stroke / 2.0) * units.mm,
        flywheel_mass: flywheel_mass * units.kg,
        mass: crank_mass * units.kg,
        friction_torque: 10.0 * units.Nm,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0.0
    )

    rod_journal rj0(angle: (0.0 / cyl) * cycle + rot90 + vee / 2)
    rod_journal rj1(angle: (8.0 / cyl) * cycle + rot90 + vee / 2)
    rod_journal rj2(angle: (4.0 / cyl) * cycle + rot90 + vee / 2)
    rod_journal rj3(angle: (10.0 / cyl) * cycle + rot90 + vee / 2)
    rod_journal rj4(angle: (2.0 / cyl) * cycle + rot90 + vee / 2)
    rod_journal rj5(angle: (6.0 / cyl) * cycle + rot90 + vee / 2)
    
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 500 * units.g,
        blowby: k_28inH2O(0.05),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    cylinder_bank_parameters bank_params(
        bore: bore * units.mm,
        deck_height: (con_rod + stroke / 2.0) * units.mm + compression_height
    )
    
    label intake_valve_circ(intake_valve_diameter * constants.pi)
    label intake_valve_area(intake_valve_circ * intake_valve_lift / 100.0) // cm2

    label intake_plenum_area(intake_valve_area * cyl * intake_valves) // cm2
    label exhaust_crossection_area(33.209) // cm2

    label exhaust_pipe_length_0(252.0) // cm
    label exhaust_volume_0(exhaust_crossection_area * exhaust_pipe_length_0 / 100.0) // Litres
    
    label exhaust_pipe_length_1(250.0) // cm
    label exhaust_volume_1(exhaust_crossection_area * exhaust_pipe_length_1 / 100.0) // Litres
    
    label spacing_factor(1.07)
    label flange_density(1.0)
    label primary_tube_length(89.535)

    intake intake(
        plenum_volume: 1.5 * units.L,
        plenum_cross_section_area: intake_plenum_area * units.cm2,
        intake_flow_rate: k_carb(intake_cfm),
        idle_flow_rate: k_carb(0.04),
        idle_throttle_plate_position: 0.9975,
        runner_flow_rate: k_carb(intake_cfm / (cyl / 2.0) * 1.5),
        runner_length: 12.509 * units.cm,
        velocity_decay: 0.05
    )
    
    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(exhaust_cfm),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0) * 1.33),
        velocity_decay: 1.0,
        volume: (exhaust_volume_0 + 4.0) * units.L
    )
    
    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(exhaust_cfm),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_1 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0) * 1.33),
        velocity_decay: 1.0,
        volume: (exhaust_volume_1 + 4.0) * units.L
    )

    exhaust_system exhaust0(es_params0, impulse_response: ir_lib.default_0, audio_volume: 10.0)
    exhaust_system exhaust1(es_params1, impulse_response: ir_lib.default_0, audio_volume: 6.6)
 
    cylinder_bank b0(bank_params, angle: vee / 2)
    cylinder_bank b1(bank_params, angle: -vee / 2)

    label pl0 ((1.8 * bore * spacing_factor / flange_density) * units.mm)
    label pl1 ((2.3 * bore * spacing_factor / flange_density) * units.mm)
    label pl2 ((2.2 * bore * spacing_factor / flange_density) * units.mm)
    label pl3 ((2.5 * bore * spacing_factor / flange_density) * units.mm)
    label pl4 ((2.1 * bore * spacing_factor / flange_density) * units.mm)
    label pl5 ((1.8 * bore * spacing_factor / flange_density) * units.mm)

    label pl6 ((1.7 * bore * spacing_factor / flange_density) * units.mm)
    label pl7 ((2.1 * bore * spacing_factor / flange_density) * units.mm)
    label pl8 ((2.2 * bore * spacing_factor / flange_density) * units.mm)
    label pl9 ((1.8 * bore * spacing_factor / flange_density) * units.mm)
    label pl10 ((1.7 * bore * spacing_factor / flange_density) * units.mm)
    label pl11 ((2.5 * bore * spacing_factor / flange_density) * units.mm)

    b0
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl1,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl2,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl3,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl4,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl5,
            ignition_wire: wires.wire6
        )
        
    b1
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl6,
            ignition_wire: wires.wire7
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl7,
            ignition_wire: wires.wire8
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl8,
            ignition_wire: wires.wire9
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl9,
            ignition_wire: wires.wire10
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl10,
            ignition_wire: wires.wire11
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl11,
            ignition_wire: wires.wire12
        )


    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    engine_camshaft_builder camshaft()

    b0.set_cylinder_head (
        eng_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )
    b1.set_cylinder_head (
        eng_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    // ignition_timing.py v0.1 r = 1.18
    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 9.0 * units.deg)
        .add_sample(1000 * units.rpm, 10.6 * units.deg)
        .add_sample(2000 * units.rpm, 12.5 * units.deg)
        .add_sample(3000 * units.rpm, 14.8 * units.deg)
        .add_sample(4000 * units.rpm, 17.4 * units.deg)
        .add_sample(5000 * units.rpm, 20.6 * units.deg)
        .add_sample(6000 * units.rpm, 24.3 * units.deg)
        .add_sample(7000 * units.rpm, 28.7 * units.deg)
        .add_sample(8000 * units.rpm, 33.8 * units.deg)
        .add_sample(9000 * units.rpm, 39.9 * units.deg)

    engine.add_ignition_module(
        engine_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

// GTC4 Lusso
public node veh {
    alias output __out: vehicle;
    vehicle vehicle(
        mass: 1920 * units.kg,
        drag_coefficient: 0.34,
        cross_sectional_area: (1980 * units.mm) * (1383 * units.mm),
        diff_ratio: 3.88,
        tire_radius: (713.74 / 2) * units.mm, // 295/35 ZR 20
        rolling_resistance: 20
        )
}

// GTC4 Lusso Magna (Getrag) 7DCL750
private node trn {
    alias output __out:
        transmission(
            max_clutch_torque: 750 * units.Nm,
            max_clutch_flex: 10 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 50 * units.Nm / units.deg,
            clutch_damping: 1.0,
            simulate_flex: true
        )
        .add_gear(3.40)
        .add_gear(2.19)
        .add_gear(1.63)
        .add_gear(1.29)
        .add_gear(1.03)
        .add_gear(0.84)
        .add_gear(0.63);
}

run(
    engine: eng(),
    transmission: trn(),
    vehicle: veh()
)