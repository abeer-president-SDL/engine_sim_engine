import "engine_sim.mr"
import "../../part-library/part_library.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)
label sparkadvance(-100 * units.deg)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node F1V6_distributor {
    input wires;
    input timing_curve;
    input rev_limit;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: 0.02 * units.sec)
            .connect_wire(wires.wire1, ((0.0/6.0) * cycle) + sparkadvance)  //0
            .connect_wire(wires.wire2, ((4.0/6.0) * cycle) + sparkadvance)  //480
            .connect_wire(wires.wire3, ((2.0/6.0) * cycle) + sparkadvance) //240

            .connect_wire(wires.wire4, ((0.0/6.0) * cycle) + sparkadvance)  //0
            .connect_wire(wires.wire5, ((4.0/6.0) * cycle) + sparkadvance)  //480
            .connect_wire(wires.wire6, ((2.0/6.0) * cycle) + sparkadvance); //240
}

public node F1V6_intake_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 233 * units.deg,
            gamma: 2.0,
            lift: 12 * units.mm,
            steps: 100
        );
}

public node F1V6_exhaust_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 235 * units.deg,
            gamma: 2.0,
            lift: 14 * units.mm,
            steps: 100
        );
}

public node F1V6_camshaft_builder {
    input lobe_profile: F1V6_intake_lobe_profile();
	input ex_lobe_profile: F1V6_exhaust_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 106.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 90.0 * units.deg;
    input base_radius: 16 * units.mm;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120)
	_exhaust_cam_0
        .add_lobe(rot360 - intake_lobe_center + 0 * rot120)
		.add_lobe(rot360 - intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 - intake_lobe_center + 2 * rot120)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 0 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120)
	_exhaust_cam_1
        .add_lobe(rot360 - intake_lobe_center + 0 * rot120)
		.add_lobe(rot360 - intake_lobe_center + 4 * rot120)
        .add_lobe(rot360 - intake_lobe_center + 2 * rot120)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node F1V6_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 45 * units.cc;
    input intake_runner_volume: 149.6 * units.cc;
    input intake_runner_cross_section_area: 1.9 * units.inch * 1.9 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.25 * units.inch * 1.25 * units.inch;

    input flow_attenuation: 1.3;
    input lift_scale: 1.6;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 58 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 37 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node F1V6 {
    alias output __out: engine;

    engine engine(
        name: "F1V6",
        starter_torque: 90 * units.lb_ft,
        starter_speed: 2000 * units.rpm,
        redline: 12500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 1.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 5.0
        ),
        throttle_gamma: 2.5,
        hf_gain: 0.1,
        noise: 1.0,
        jitter: 0.3,
        simulation_frequency: 20000
    )

    wires wires()

    crankshaft c0(
        throw: 53.0 * units.mm/2,
        flywheel_mass: 1 * units.lb,
        mass: 10 * units.lb,
        friction_torque: 7.0 * units.lb_ft,
        moment_of_inertia: 0.023,
        position_x: 0.0,
        position_y: 0.0,
        tdc: (constants.pi / 4) + 0 * units.deg
    )

    //0 120 240

    rod_journal rj0(angle: 0.0 * units.deg)
    rod_journal rj1(angle: 270.0 * units.deg)

    rod_journal rj2(angle: 120.0 * units.deg)
    rod_journal rj3(angle: 390.0 * units.deg)

    rod_journal rj4(angle: 240.0 * units.deg)
    rod_journal rj5(angle: 510.0 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 100 * units.g,
        compression_height: 30.00 * units.mm,
        wrist_pin_position: 0.0,
        displacement: -5 * units.cc
    )

    connecting_rod_parameters cr_params(
        mass: 240 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 102 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 80 * units.mm,
        deck_height: 160 * units.mm
    )

    intake intake(
        intake_flow_rate: k_carb(3800.0),
        runner_flow_rate: k_carb(2000.0),
        idle_flow_rate: k_carb(0.01),
        idle_throttle_plate_position: 0.99845,
        runner_length: 2.0 * units.inch,
        plenum_volume: 125 * units.cc,
        plenum_cross_section_area: 15.0 * units.cm2
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(800.0),
        velocity_decay: 1.0,
        volume: 12.0 * units.L
    )

    exhaust_system exhaust0(
        es_params, audio_volume: 1.0 * 0.01, impulse_response: ir_lib.mild_exhaust_0)
    exhaust_system exhaust1(
        es_params, audio_volume: 0.8 * 0.01, impulse_response: ir_lib.mild_exhaust_0)

    cylinder_bank b0(bank_params, angle: 45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            sound_attenuation: 0.9,
            primary_length: 16 * units.inch
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2,
            sound_attenuation: 0.8,
            primary_length: 16 * units.inch
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
            sound_attenuation: 0.9,
            primary_length: 16 * units.inch
        )

    cylinder_bank b1(bank_params, angle: -45 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
            sound_attenuation: 0.9,
            primary_length: 16 * units.inch
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5,
            sound_attenuation: 0.8,
            primary_length: 16 * units.inch
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
            sound_attenuation: 0.9,
            primary_length: 16 * units.inch
        )

    engine.add_cylinder_bank(b0)
    engine.add_cylinder_bank(b1)
    engine.add_crankshaft(c0)

    F1V6_camshaft_builder camshaft(
        lobe_profile: F1V6_intake_lobe_profile(),
		ex_lobe_profile: F1V6_exhaust_lobe_profile()
    )

    b0.set_cylinder_head (
        F1V6_head(
            chamber_volume: 22.5 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )

    b1.set_cylinder_head (
        F1V6_head(
            chamber_volume: 22.5 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: false
        )
    )


    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0 * units.rpm, 0 * units.deg)
		.add_sample(1000 * units.rpm, 25 * units.deg)
		.add_sample(2000 * units.rpm, 28 * units.deg)
		.add_sample(3000 * units.rpm, 30 * units.deg)
		.add_sample(4000 * units.rpm, 32 * units.deg)
		.add_sample(5000 * units.rpm, 33 * units.deg)
		.add_sample(6000 * units.rpm, 35 * units.deg)
		.add_sample(7000 * units.rpm, 36 * units.deg)
		.add_sample(8000 * units.rpm, 40 * units.deg)
		.add_sample(9000 * units.rpm, 42 * units.deg)
		.add_sample(10000 * units.rpm, 44 * units.deg)
        .add_sample(11000 * units.rpm, 48 * units.deg)
        .add_sample(12000 * units.rpm, 52 * units.deg)
        .add_sample(13000 * units.rpm, 58 * units.deg)
        .add_sample(14000 * units.rpm, 64 * units.deg)
        .add_sample(15000 * units.rpm, 68 * units.deg)


    engine.add_ignition_module(
        F1V6_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 12500 * units.rpm
        ))
}

public node F1V6_vehicle {
	alias output __out: vehicle;
	vehicle vehicle(
		mass: 798 * units.kg,
		drag_coefficient: 0.01,
		cross_sectional_area: (5500 * units.mm) * (2000 * units.mm),
		diff_ratio: 11.00,
		tire_radius: 28 * units.inch,
		rolling_resistance: 6000,
        stiffness: 100 * units.lb_ft / units.deg,
        damping: 8.0,
        max_flex: 3 * units.deg,
        limit_flex: true,
        simulate_flex: false
		)
}

public node F1V6_transmission {
    alias output __out: trans;
    transmission trans(
        max_clutch_torque: 2000 * units.lb_ft,
        max_clutch_flex: 3 * units.deg,
        limit_clutch_flex: true,
        clutch_stiffness: 346 * units.lb_ft / units.deg,
        clutch_damping: 2.0,
        simulate_flex: false
        )

    trans
        .add_gear(2.8)
        .add_gear(2.29)
        .add_gear(1.93)
        .add_gear(1.583)
        .add_gear(1.375)
        .add_gear(1.19)
        .add_gear(1.05)
        .add_gear(0.93)
}

public node main {
    set_engine(F1V6())
	set_transmission(F1V6_transmission())
    set_vehicle(F1V6_vehicle())
}

main()