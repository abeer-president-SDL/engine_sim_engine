import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
}

label cycle(2 * 360 * units.deg)
public node wb_ignition {
    input wires;
    input timing_curve;
    input rev_limit: 11000 * units.rpm;
    alias output __out:
        ignition_module(
            timing_curve: timing_curve,
            rev_limit: rev_limit,
            limiter_duration: 0.08
        )
            .connect_wire(wires.wire1, (0.0 / 7.0) * cycle)
            .connect_wire(wires.wire3, (1.0 / 7.0) * cycle)
            .connect_wire(wires.wire5, (2.0 / 7.0) * cycle)
            .connect_wire(wires.wire7, (3.0 / 7.0) * cycle)
            .connect_wire(wires.wire2, (4.0 / 7.0) * cycle)
            .connect_wire(wires.wire4, (5.0 / 7.0) * cycle)
            .connect_wire(wires.wire6, (6.0 / 7.0) * cycle);
}

public node vvt_camshaft_builder {
    input lobe_profile: comp_cams_magnum_11_450_8_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 117 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;  
    input advance: -8 * units.deg; 
    input base_radius: 0.75 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 7.0) * units.deg)
    label rot1(2 * (360 / 7.0) * units.deg)
    label rot2(2 * (360 / 7.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam
        .add_lobe((rot360 - exhaust_lobe_center) + 0.0 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 4.0 * rot2)
        .add_lobe((rot360 - exhaust_lobe_center) + 1.0 * rot1)
        .add_lobe((rot360 - exhaust_lobe_center) + 5.0 * rot1)
        .add_lobe((rot360 - exhaust_lobe_center) + 2.0 * rot2)
        .add_lobe((rot360 - exhaust_lobe_center) + 6.0 * rot1)
        .add_lobe((rot360 - exhaust_lobe_center) + 3.0 * rot1)
    _intake_cam
        .add_lobe(rot360 + intake_lobe_center + 0.0 * rot)
        .add_lobe(rot360 + intake_lobe_center + 4.0 * rot2)
        .add_lobe(rot360 + intake_lobe_center + 1.0 * rot1)
        .add_lobe(rot360 + intake_lobe_center + 5.0 * rot1)
        .add_lobe(rot360 + intake_lobe_center + 2.0 * rot2)
        .add_lobe(rot360 + intake_lobe_center + 6.0 * rot1)
        .add_lobe(rot360 + intake_lobe_center + 3.0 * rot1)
}

private node t2jz_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input vtec_intake_camshaft;
    input vtec_exhaust_camshaft;
    input chamber_volume: 50 * units.cc;
    input intake_runner_volume: 149.6 * units.cc;
    input intake_runner_cross_section_area: 1.9 * units.inch * 1.9 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.25 * units.inch * 1.25 * units.inch;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 58 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 37 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: vtec_valvetrain(
            min_rpm: 4400 * units.rpm,
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft,
            vtec_intake_camshaft: vtec_intake_camshaft,
            vtec_exhaust_camshaft: vtec_exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node t2jz {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "inline 7 vvt 2jz headers",
        starter_torque: 500 * units.lb_ft,
        redline: 20000 * units.rpm,
        fuel: fuel(
            max_burning_efficiency: 1.0
        ),
        hf_gain: 0.01,
        noise: 1.0,
        jitter: 0.6,
        simulation_frequency: 7000
    )

    label stroke(86.0 * units.mm)
    label bore(86.0 * units.mm)
    label rod_length(142 * units.mm)
    label rod_mass(500 * units.g)
    label compression_height(32.8 * units.mm)
    label crank_mass(17.5 * units.kg)
    label flywheel_mass(10 * units.kg)
    label flywheel_radius(7 * units.inch)

    label crank_moment(
        1.5 * disk_moment_of_inertia(mass: crank_mass, radius: stroke)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 10 * units.kg, radius: 23.5 * units.mm)
    )

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 7.833333333333333 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 2
    )

    rod_journal rj0(angle: 0.0 * cycle/7.0) ///1
    rod_journal rj1(angle: 4.0 * cycle/7.0) ///2
    rod_journal rj2(angle: 1.0 * cycle/7.0) ///3
    rod_journal rj3(angle: 5.0 * cycle/7.0) ///4
    rod_journal rj4(angle: 2.0 * cycle/7.0) ///5
    rod_journal rj5(angle: 6.0 * cycle/7.0) ///6
    rod_journal rj6(angle: 3.0 * cycle/7.0) ///7
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: (200 + 50) * units.g,
        blowby: 0,
        compression_height: compression_height,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    intake intake(
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        intake_flow_rate: k_carb(500.0),
        runner_flow_rate: k_carb(200.0),
        runner_length: 40.0 * units.inch,
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.9965
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 40.0 * units.inch,
        primary_flow_rate: k_carb(400.0),
        velocity_decay: 1.0
    )
    
    exhaust_system exhaust0(
        es_params,
        length: 100.0 * units.inch,
        audio_volume: 1.0,
        impulse_response: ir_lib.default_0)

    exhaust_system exhaust1(
        es_params,
        length: 100.0 * units.inch,
        audio_volume: 0.8,
        impulse_response: ir_lib.default_0)

    label spacing(0.5 * units.inch)

    cylinder_bank b0(bank_params, angle: 0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            primary_length: spacing * 5,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.02)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
            primary_length: spacing * 3,
            sound_attenuation: 0.97
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
            primary_length: spacing * 4,
            sound_attenuation: 0.95
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.02)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
            primary_length: spacing * 4,
            sound_attenuation: 0.98
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.02)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5,
            primary_length: spacing * 3,
            sound_attenuation: 0.9
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
            primary_length: spacing * 5,
            sound_attenuation: 0.93
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.02)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire7,
            primary_length: spacing * 5,
            sound_attenuation: 0.9
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe VVTintake_lobe(
        duration_at_50_thou: 250 * units.deg,
        gamma: 1.0,
        lift: 9.78 * units.mm,
        steps: 100
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 250 * units.deg,
        gamma: 1.0,
        lift: 9.60 * units.mm,
        steps: 100
    )

    vvt_camshaft_builder vtec_camshaft(
        lobe_profile: VVTintake_lobe,
        intake_lobe_profile: VVTintake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 102 * units.deg,
        lobe_separation: 102 * units.deg,
        advance: 7 * units.deg,
        base_radius: (34.0 / 2) * units.mm
    )

    vvt_camshaft_builder camshaft(
        lobe_profile: "N/A",
        intake_lobe_profile: VVTintake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        exhaust_lobe_center: 117 * units.deg,
        lobe_separation: 117 * units.deg,
        advance: -8 * units.deg,
        base_radius: (34.0 / 2) * units.mm
    )

    b0.set_cylinder_head (
        t2jz_head(
            chamber_volume: 50 * units.cc,
            intake_camshaft: camshaft.intake_cam,
            exhaust_camshaft: camshaft.exhaust_cam,
            vtec_intake_camshaft: vtec_camshaft.intake_cam,
            vtec_exhaust_camshaft: vtec_camshaft.exhaust_cam,
            flow_attenuation: 1.0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0 * units.rpm, 12.0 * units.deg)
        .add_sample(250 * units.rpm, 15.0 * units.deg)
        .add_sample(500 * units.rpm, 20.0 * units.deg)
        .add_sample(700 * units.rpm, 22.0 * units.deg)
        .add_sample(1000 * units.rpm, 24.2 * units.deg)
        .add_sample(1200 * units.rpm, 28.0 * units.deg)
        .add_sample(1500 * units.rpm, 30.0 * units.deg)
        .add_sample(2000 * units.rpm, 35.0 * units.deg)
        .add_sample(3000 * units.rpm, 38.0 * units.deg)
        .add_sample(4000 * units.rpm, 41.0 * units.deg)
        .add_sample(6000 * units.rpm, 43.0 * units.deg)
        .add_sample(8000 * units.rpm, 45.0 * units.deg)
        .add_sample(10000 * units.rpm, 45.2 * units.deg)

    engine.add_ignition_module(
        wb_ignition(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 11000 * units.rpm
        )
    )
}

label car_mass(1090 * units.kg)

// Toyota Sprinter Trueno GT-APEX '90 (AE101)
public node AE101 {
    alias output __out:
        vehicle(
            mass: car_mass,
            drag_coefficient: 0.35,
            cross_sectional_area: (1.695 * units.mm) * (1.305 * units.mm),
            diff_ratio: 4.312,
            tire_radius: 10 * units.inch,
            rolling_resistance: 300 * units.N,
            stiffness: 50 * units.lb_ft / units.deg,
            damping: 15.0,
            max_flex: 5 * units.deg,
            limit_flex: true,
            simulate_flex: true
        );
}

public node C56_transmission{
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.lb_ft,
            max_clutch_flex: 5 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 50 * units.lb_ft / units.deg,
            clutch_damping: 2.0,
            simulate_flex: true
        )
        .add_gear(3.166)
        .add_gear(1.904)
        .add_gear(1.392)
        .add_gear(1.031)
        .add_gear(0.815);
}

public node main {
    run(
        engine: t2jz(),
        transmission: C56_transmission(),
        vehicle: AE101()
    )
}

main()
